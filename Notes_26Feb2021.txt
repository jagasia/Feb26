Collections
-----------
List	(ordered (remembers the order in which the elements where added)	(allows duplicates)
	ArrayList	has index		get(index)
	LinkedList
Set	(order is based on algorithm)	(rejects duplicates)
	HashSet			order is based on hashcode
	TreeSet			sorted	based on comparator /comparable
	LinkedHashSet		order in which elements are added
Map	(key-value pair)	2 dimensions
	HashMap
	TreeMap
	LinkedHashMap

What is a map.
	we want to store elements along with their key identifier	(like a primary key)
	key is a unique identifier means, Key is a Set	(HashSet??? or TreeSet????? or LinkedHashSet?????)

	HashMap		
		key is a HashSet

	TreeMap
		key is a TreeSet
	
	LinkedHashMap
		key is a LinkedHashSet

Lets see an example for HashMap

	Let us store the country code as key. Country name as value

	INR	India
	USD	United States of America
	AED 	United Arab Emirates Dirham
	AFN	Afghanistan Afghani
	ALL	Albania Lek
	AMD	Armenia Dram

1) iMPORT
2) Create a project exactly same name in same location



		HashMap<String, String> cc=new HashMap<>();
		//there is no add method in map
		//use put and get
		cc.put("INR","India");
		cc.put("USD","United States of America");
		cc.put("AED","United Arab Emirates Dirham");
		cc.put("AFN","Afghanistan Afghani");
		cc.put("ALL","Albania Lek");
		cc.put("AMD","Armenia Dram");
		System.out.println(cc);


To add an entry into the Map, use "put" method				put(key, value)
To retrieve the value based on a key, use "get" method			value=get(key);

HashMap
	maintains the key as a HashSet. 
	Since key is a set, it does not allow duplicates. 
	Map slightly differes the way it reacts to duplicates.


whenever we add duplicate key in a map, the value will be updated with the new entry


imagine how the receipt is stored???
every receipt has bill number
billno	billdate	itemnumber	
1	today		1231
1	today		2231


billno,	Order(....)

HashSet<Employee>
	

HashMap<Integer, Employee>

HashMap<Receipt, Order>

composite key
	for key, they create an user defined class
	class Receipt
		billno
		itemno

-----------------------------
How to display All the entries in a HashMap
	System.out.println(x);
There is no iterator for a Map	
	i) i can get all the keys as a Set. Set has itertor
	ii) for each loop


to get all the keys as a Set			keySet
to get all the entries as a Set			entrySet


//how to display Map???
		//i) get the keys as a set
		Set<String> keys = cc.keySet();	
		for(String key:keys)
			System.out.println(key+"\t:\t"+cc.get(key));
		
		//ii) using for each loop. Look the map is a Set of entries
		for(Entry<String, String> entry:cc.entrySet())
		{
			System.out.println(entry.getKey()+"\t:\t"+entry.getValue());
		}


TreeMap
	always maintains the keys in sorted manner. Sorted means, predefined types already implements Comparable.
	If KEY is user defined, then comparable/comparator is required

LinkedHashMap
	maintains the keys in the order in which they are added

In any Map,
	when we use "put" method, it may add or it may update
	i) if key is not found, it is added
	ii) if key is found, its value is replaced by the new value

Task:
	Write a program to accept a string input from the user.
	ex:	
	input:	India is our country. There are many states in India. There are many languages.
	
	output:
	a	8
	c	1
	d	2
	
	Display the alphabets and their number of occurrance. If an alphabet is not found in the input, NO NEED TO DISPLAY 0
	Display not only the alphabets, but SPACE, DOT, COMMA AND ANY SYMBOLS FOUND IN THE INPUT STRING

	Hint:
		map.get(key);			//if key is not found, it will return null

	if i am getting null, the value to be added is 1
	if i am not getting null, already some value is there, increment it and again put the same, replace




	public static Map<Integer, Integer> yearWiseCount(List<Mobile> mobileList)
	{
		Map<Integer, Integer> result=new TreeMap<>();
		for(Mobile mobile:mobileList)
		{
			Date launchDate = mobile.getLaunchedDate();
			//extract year from launchDate
			Integer year=launchDate.getYear()+1900;
			Integer count=result.get(year);
			if(count==null)
				count=0;
			count++;
			result.put(year, count);
		}
		return result;
	}

class University
{
	String name;				//name of the university
	List<College> collegeList;	
}

class College
{
	String name;
	Integer numberOfDepts;
//	String universityName;		//name of the University
	University university;		//this?????>?>> are you able to understand???????
}

	
Aggregation or Composition

An object has another object
or
An object is a part of another object

A car has engine
A car has audio system

A has B

A and B can exist independently. And can has association
That is aggregation

A has B
	but B cannot exist alone
THat is composition


public static List<Contact> prefill()throws ParseException{
List<Contact> contactList = new ArrayList<>();
SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
contactList.add(new Contact("John","9876543210","john@gmail.com",sdf.parse("31/01/1990")));
contactList.add(new Contact("Grace","9898798652","grace@gmail.com",sdf.parse("27/02/1987")));
contactList.add(new Contact("Wayne","9787621230","wayne@gmail.com",sdf.parse("15/09/1988")));
contactList.add(new Contact("Joe","9879865898","joe@gmail.com",sdf.parse("23/07/1992")));
contactList.add(new Contact("David","9856985620","david@gmail.com",sdf.parse("24/05/1982")));
contactList.add(new Contact("Jane","9765659820","jane@gmail.com",sdf.parse("13/03/1993")));
contactList.add(new Contact("Choe","9595878580","choe@gmail.com",sdf.parse("26/09/1989")));
contactList.add(new Contact("Chris","9659659790","chris@gmail.com",sdf.parse("15/03/1993")));
return contactList;
}



we use prefill method only in main method
and we call this prefill method only once in main method
after that
we got the List<Contact> 
this list only is used



Person rama;
rama=new Student();			//Student extends Person

rama instanceof Student			//true
rama instanceof Person			//true

Abstract class and Interface

StringBuilder
StringBuffer

	allows editing a portion of a String

8 primitive data types. And each primitive has a corresponding Wrapper class
Integer
Byte
Short
Long
Double
Boolean
Char
Float


---------Let us continue from Enumeration types
Monday
Tuesday
Wednesday
.....

This is an example for enumeration

Enumeration is like a Type	

enum Days
{
	MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
}

public class EnumerationDemo {

	public static void main(String[] args) {
		Days today=Days.FRIDAY;
//		today=Days.FEBRUARY;			Not allowed. Only those 7 values are allowed
		System.out.println(today);
	}

}



Inner class
----------------------

class Car
{
	String name="Swift";
	String color;
	Engine engine=new Engine();
	
	class Engine
	{
		//this is inner class
		String neuralSchema="secret";
		public void start()
		{
			System.out.println(name+"......Grrrrrr.....");
		}
	}
	
	public void run() {
		System.out.println("Car is running in "+engine.neuralSchema);
	}
}

enum Days
{
	MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;
};

public class EnumerationDemo {

	public static void main(String[] args) {
		Days today=Days.FRIDAY;
//		today=Days.FEBRUARY;			Not allowed. Only those 7 values are allowed
		System.out.println(today);
		
		Car swift=new Car();
		swift.engine.start();
		swift.run();
	}

}


in css,
display : 200;		//will you agree???		block	or	inline	or	flex	
you will not agree anything other than the allowed values.
THat is what we call it as enum in java

Anonymous classes
	We used anonymous class when we wanted to implement an interface just like that (ad hoc)



interface Person
{
	public void speak();
	public void listen();
}

public class AnonymousDemo {

	public static void main(String[] args) {
		Person rama=new Person() {
			
			@Override
			public void speak() {
				System.out.println("Person speaks");
				
			}
			
			@Override
			public void listen() {
				System.out.println("Person listens");
				
			}
		};
		rama.speak();
		rama.listen();
	}

}

-----------------------------------
Anonymous function
		List<Integer> marks=new ArrayList<Integer>();
		marks.add(12);
		marks.add(2);
		marks.add(22);
		marks.add(122);
		marks.add(212);
		marks.add(112);
		marks.add(152);
		marks.add(125);
		marks.add(512);
		marks.add(132);
		Collections.sort(marks,(a,b)->b.compareTo(a));
		for(Integer x:marks)
			System.out.println(x);

---------------------------
String formating
System.out.printf("%-10s %s\n","Month", "Count"); 
System.out.format("%-10s %s\n","Month", "Count"); 

these 2 will display the output in the given format
But
String str=String.format("%-10s %s\n","Month", "Count"); 
	will not display. But it will return the formatted string. This is very useful when we create BO methods that should return the result rather than displaying it.

-------------------------------------
StringJoiner

StringJoiner sj=new StringJoiner(",");
		sj.add("India");
		sj.add("Australia");
		sj.add("Pakistan");
		sj.add("Sri lanka");
		sj.add("Canada");
		sj.add("Japan");
		sj.add("China");
		sj.add("Bangladesh");
		System.out.println(sj);
----------------
in java
	0 is prefixed to imply an octal number
	0x is prefixed to imply a hexa decimal number

		int x=010;
		System.out.println(x);	//8

		int x=0X10;
		System.out.println(x);	//16


System.out.format("%o ... %x",8,16);		//		10 ... 10


-------------------
Annotation
	what is meant by annotation?
		it means comment
	How does annotations differ from comments in java?
		//this is a single line comment
		/*this is a multi
			line comment*/

	The above comments are ignored by the compiler.
	But annotations are not ignored by the compiler. 
			Runtime annotations are present in the compiled code itself.
	The annotations can be read by other programs to understand the role or purpose of a

 code

	@Override	is an example for annotation. But this annotation is a compiler level annotation, and hence it is not available in compiled code. Only for the compiler checking purpose, it is used.

	@Deprecated	is also an example for annotation. It means, that this item is out of fashion. Or discontinued. Or old style.

	We are going to learn to create our own annotations.
	and we will specify the Retention policy for that annotation

	
We are going to create Annotations now
--------------------------------------
we created classes
we created interfaces
we created enums
we are now creating annotation

	public @interface encouraged
	{
		
	}

An annotation can be targeted on 
	class
	method
	constructor
	interface
	getters
	setters
	fields
	

Annotations can also take parameters
	public @interface encouraged
	{
		String message();	
	}

we are going to write a program that reads annotation


Annotations form metadata
	
Reflection means, reading meta data
we are going to do reflection in java
through reflection, we can find out how many methods are there in a class.	


Rentention values:
	SOURCE			The annotations are available in source code only.Compiler uses this annotation give error. But after compilation, these annotations are removed
	RUNTIME			The annotations are avaialble at runtime




Task 1:
-----
A date is a magic date if the sum of all the digits becomes 1. This happens when we repeatedly add the digits until it becomes a single digit number.
Ex:
	02-02-2004 is a magic number because,

	2+2+2+4=10
	since 10 is more than a 2 digit number,	repeat the same:
	1+0=1

	since the single digit obtained is 1, 
	02-02-2004 is a magic number

02-02-2004
12-12-2002
04-01-2003
04-01-2012
04-01-2004
20-08-1998


import java.util.Scanner;

public class IncrementalSequence {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str=sc.next();
		int index=0;
		char[] carr = str.toCharArray();
		int previous=carr[0]-48;
		int violation=0;
		boolean isValid=true;
		int digitSum=previous;
		for(int i=1;i<carr.length;i++)
		{
			int current=carr[i]-48;
//			System.out.println("Comparing "+previous+" with "+current);
			if(previous>current)
			{
				violation=previous;
				isValid=false;
			}
			digitSum+=current;
			previous=current;
		}
		
		if(!isValid) {
			System.out.println("False");
			System.out.println(violation);
		}else
		{
			System.out.println("True");
			System.out.println(digitSum);
		}

	}

}
==================================================================
Exception Handling:
-------------------
	What do you think is exception???
		Exception interrupts the flow of execution of the program

	when we do not know how to react, we raise exception

	divide by zero is an example of exception
		because we dont know what is the result of divide by zero

	Exception is an object created in such situation
		That means Exception is a class

	Some behavior of exception:
		the program terminates abruptly
		the program do not continue
		
	we are not discussing about syntax error.	
	we are not discussing about logical error.

	we are discussing runtime exceptions

	All exception messages we see, all errors we see are defined. already defined.

			Object
			
			Throwable
	
		Error		Exception		(these 2 classes are derived from Throwable)

	Among these 2, Error(s) cannot be handled
	Exceptions can be handled

	Lets see why Exceptions are raised...


	throw an object of any class that is derived from "Exception" or "RuntimeException" or any of their sub classes
	A class that extends Exception
		is an exception class. That means its object can be thrown
	Not all classes are throwable. Only classes derived from Throwable are throwable.

DivideByZeroException
	denominator is 0
		universally this is wrong. But if Sun microsystems knows how to react in this situation, they would not have thrown exception
		They know that denominator 0 is wrong, but how to proceed, is not their decision. So they throw exception. allowing us to handle the exception

HTML front end		servlet		DAO (jdbc)	Oracle Stored Procedure (PLSQL)		database 
Form submit	


a class Extending Exception is checked by the compiler
So classes that extend Exception class are called as "Checked Exception"s

a class that exend RuntimeException are not checked by complier. So we will not use "throws" in that case
They are called as "Unchecked Exception"s


ArithmeticException	(unchecked)
NumberFormatException	(unchecked)
ArrayIndexOutOfBoundsException	(unchecked)


IOException		(checked)





to handle exceptions,
we use try catch finally blocks


try block
	keep the block very minimum lines of code
	if you keep so many lines of code inside try block, it will disrupt your execution flow
	when exception occurs in a line, it will jump to catch block. so if there are many lines below, then they are not executed


try
{
}
catch
catch
catch
finally


try
finally

try
catch


try
catch
finally

try
catch
catch
catch
catch
finally

	
finally block is executed whenever try block is executed.
even if exception occured or not
even if exception is handled or not

Activity 1:
-----------
	Identify the difference between 
		checked exception 
		unchecked exception

	Identify atleast 5 exception classes in both category

	Identify the difference between
		throw
		throws

	Identify the use of
		try
		catch
		finally

	Identify how to create user defined exception classes (checked, unchecked)

	Identify what are assertions
		How to enable and how to disable


	

FOr creating object of a class another technique is there:

	Class.forName("Student");		//this will create an object of Student.

	at compile time, it will not check if Student class is available or not

	ClassNotFoundException
		Class.forName("Student");